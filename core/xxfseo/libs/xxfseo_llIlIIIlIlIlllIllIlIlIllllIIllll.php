<?php
class db{public $db=null; protected $dbType=null; public $sql=''; public $pre=''; private $data=array(); private $options=array(); protected $queryID=null; public $connected=false; protected $dbconfig=array(); private $comparison=array('eq'=>'=','neq'=>'!=','gt'=>'>','egt'=>'>=','lt'=>'<','elt'=>'<=','notlike'=>'NOT LIKE','like'=>'LIKE'); public function __construct($db_config=''){if(config('db_type')==''){config('db_type','mysql'); } if(config('db_charset')==''){config('db_charset','utf8'); } $this->dbconfig['db_dsn']=isset($db_config['db_dsn'])?$db_config['db_dsn']:config('db_dsn'); $this->dbconfig['db_type']=isset($db_config['db_type'])?$db_config['db_type']:config('db_type'); $this->dbconfig['db_host']=isset($db_config['db_host'])?$db_config['db_host']:config('db_host'); $this->dbconfig['db_user']=isset($db_config['db_user'])?$db_config['db_user']:config('db_user'); $this->dbconfig['db_pwd']=isset($db_config['db_pwd'])?$db_config['db_pwd']:config('db_pwd'); $this->dbconfig['db_port']=isset($db_config['db_port'])?$db_config['db_port']:config('db_port'); $this->dbconfig['db_name']=isset($db_config['db_name'])?$db_config['db_name']:config('db_name'); $this->dbconfig['db_charset']=isset($db_config['db_charset'])?$db_config['db_charset']:config('db_charset'); $this->dbconfig['db_prefix']=isset($db_config['db_prefix'])?$db_config['db_prefix']:config('db_prefix'); $this->dbconfig['db_pconnect']=isset($db_config['db_pconnect'])?$db_config['db_pconnect']:config('db_pconnect'); $this->dbconfig['db_debug']=isset($db_config['db_debug'])?$db_config['db_debug']:config('db_debug'); $this->options['_field']='*'; $this->initConnect(); } public function initConnect(){if($this->connected){return false; } $db_config=$this->parseConfig($this->dbconfig); $this->dbType=ucwords(strtolower($db_config['dbms'])); require_load(LIB_PATH.encryptionName('db','').'/'.encryptionName('dbPdo.class.php')); $this->db=new dbPdo(); $result=$this->db->connect($db_config); if($result) $this->connected=true; } public function table($table,$ignore_prefix=false){if($ignore_prefix){$this->options['_table']=$this->addSpecialChar($table); }else{$table=$this->dbconfig['db_prefix'].$table; $this->options['_table']=$this->addSpecialChar($table); } return $this; } public function cache($cachetime=0,$key='',$dirname=''){if($cachetime){$this->options['cache']=array('cachetime'=>$cachetime,'key'=>$key,'dirname'=>$dirname); }else{$this->options['cache']=false; } return $this; } public function __call($method,$args){$method=strtolower($method); if(in_array($method,array('field','data','where','group','having','order','limit'))){$this->options['_'.$method]=$args[0]; return $this; }else if(method_exists($this->db,$method)){$this->db->$method($args); }else{$this->error($method.'方法在类中没有定义'); } } protected function _getDsnType($dsn){$match=explode(':',$dsn); $dbType=strtoupper(trim($match[0])); return $dbType; } public function parseDSN($dsnStr){if( empty($dsnStr) ){return false;} $info=parse_url($dsnStr); if($info['scheme']){$dsn=array( 'dbms'=>$info['scheme'], 'username'=>isset($info['user']) ? $info['user'] : '', 'password'=>isset($info['pass']) ? $info['pass'] : '', 'hostname'=>isset($info['host']) ? $info['host'] : '', 'hostport'=>isset($info['port']) ? $info['port'] : '', 'database'=>isset($info['path']) ? substr($info['path'],1) : '' ); }else{preg_match('/^(.*?)\:\/\/(.*?)\:(.*?)\@(.*?)\:([0-9]{1, 6})\/(.*?)$/',trim($dsnStr),$matches); $dsn=array( 'dbms'=>$matches[1], 'username'=>$matches[2], 'password'=>$matches[3], 'hostname'=>$matches[4], 'hostport'=>$matches[5], 'database'=>$matches[6] ); } $dsn['dsn']=''; return $dsn; } private function parseConfig($db_config=''){if ( !empty($db_config) && is_string($db_config)){$db_config=$this->parseDSN($db_config); }elseif(is_array($db_config)){$db_config=array_change_key_case($db_config); $db_config=array( 'dbms'=>$db_config['db_type'], 'username'=>$db_config['db_user'], 'password'=>$db_config['db_pwd'], 'hostname'=>$db_config['db_host'], 'hostport'=>$db_config['db_port'], 'database'=>$db_config['db_name'], 'dsn'=>$db_config['db_dsn'], 'params'=>$db_config['db_params'], ); }elseif(empty($db_config)){$this->error('数据库信息未配置'); } if($db_config['dsn']=='' && 'mysql'==strtolower($db_config['dbms']) ){$db_config['dsn']='mysql:host='.$db_config['hostname'].';'; if($db_config['database']){$db_config['dsn'].='dbname='.$db_config['database'].';'; } $db_config['dsn'].='charset=utf8'; } return $db_config; } public function startTrans(){return $this->db->startTrans(); } public function commit(){return $this->db->commit(); } public function rollback(){return $this->db->rollback(); } public function query($sql){if(empty($sql)){return false; } $this->sql=$sql; return $this->db->query($this->sql); } public function count($field=''){$table=$this->options['_table']; if($field==''){$this->options['_field']='count(*) as xxf'; }else{$this->options['_field']='count('.$field.') as xxf'; } if(isset($this->options['cache']) && !$this->options['cache']['dirname']){$this->options['cache']['dirname']='count'; } $data=$this->select(); return $data[0]['xxf']; } public function find(){return $this->select(1); } public function select($limit=''){$table=$this->options['_table']; $field=$this->options['_field']; $field=$this->parseField($field); if($limit){$this->options['_limit']=$limit; } $isfind=false; if($limit==1 || $limit=='0,1'){$isfind=true; } $where=$this->_parseCondition(); $this->options['_field']='*'; $this->sql="SELECT $field FROM $table $where"; $cache=isset($this->options['cache'])?$this->options['cache']:false; if($cache){$cachekey=$cache['key']?$cache['key']:getHashDir($this->sql).'/'.md5($this->sql); $cachedir=$this->options['cache']['dirname']?$this->options['cache']['dirname']:'select'; $cacheid=str_replace('`','',$this->options['_table']).'/'.$cachedir.'/'.$cachekey; $data=cache('dbDatas/'.$cacheid,'',$this->options['cache']['cachetime']); if(false !== $data && null !== $data){return $data; } } $result=$this->query($this->sql); if($result===false){return false; } $data=$isfind?$result[0]:$result; if($cache && $data){cache('dbDatas/'.$cacheid,$data,$this->options['cache']['cachetime']); } return $data; } public function add($data=array()){if(!empty($data)){$this->options['_data']=$data; } return $this->insert(); } public function save($data=array()){if(!empty($data)){$this->options['_data']=$data; } return $this->update(); } public function insert(){$table=$this->options['_table']; $data=$this->_parseData('add'); $this->sql="INSERT INTO $table $data" ; $query=$this->db->execute($this->sql); if($this->db->affectedRows()){return $this->db->getLastInsertId(); } return false; } public function update(){$table=$this->options['_table']; $data=$this->_parseData('save'); $where=$this->_parseCondition(); if(empty($data)) return false; if(empty($where)) return false; $this->sql="UPDATE $table $data $where" ; return $this->db->execute($this->sql); } public function replace(){$table=$this->options['_table']; $data=$this->_parseData('add'); $this->sql="REPLACE INTO $table $data" ; $query=$this->query($this->sql); if($this->db->affectedRows()){return $this->db->getLastInsertId(); } return false; } public function delete(){$table=$this->options['_table']; $where=$this->_parseCondition(); if(empty($where)){return false; } $this->sql="DELETE FROM $table $where"; return $this->db->execute($this->sql); } public function setInc($field,$step=1){return $this->setField($field,array('exp',$field.'+'.$step)); } public function setDec($field,$step=1){return $this->setField($field,array('exp',$field.'-'.$step)); } public function setField($field,$value=''){if(is_array($field)){$data=$field; }else{$data[$field]=$value; } return $this->save($data); } public function getError(){return $this->db->getError(); } public function getLastSql(){return $this->db->getLastSql(); } public function getSql(){return $this->sql; } public function checkField($field){if(empty($this->fields)){$table=str_replace('`','',$this->options['_table']); $this->flushFields($table); } if($this->fields){if(is_numeric($field) || !in_array($field,$this->fields['names'])){return false; } } return true; } public function flushFields($table){$cacheid=$this->dbconfig['db_type'].'_'.$table.'_info'; $cachetime=config('web_debug')?0.001:3600; $data=cache('dbfields/'.$cacheid,'',$cachetime); if($data){$this->fields=$data; return ; } $fields=$this->db->getFields($table); if(!$fields){return false; } $this->fields=array(); $this->fields['names']=array_keys($fields); $this->fields['_autoinc']=false; $type=$default=$notnull=array(); foreach ($fields as $key=>$val){$type[$key]=$val['type']; $default[$key]=$val['default']; $notnull[$key]=$val['notnull']; if($val['primary']){$this->fields['_pk']=$key; if($val['autoinc']) $this->fields['_autoinc']=true; } } $this->fields['_default']=$default; $this->fields['_type']=$type; $this->fields['_notnull']=$notnull; cache('dbfields/'.$cacheid,$this->fields,$cachetime); } private function _parseData($type){if((!isset($this->options['_data']))||(empty($this->options['_data']))){unset($this->options['_data']); return false; } if(is_string($this->options['_data'])){$data=$this->options['_data']; unset($this->options['_data']); return $data; } if($type=='add'){$table=str_replace('`','',$this->options['_table']); $this->flushFields($table); $diffArr=array_diff($this->fields['names'],array_keys($this->options['_data'])); if($diffArr){foreach($diffArr as $k=>$vo){if($vo<>$this->fields['_pk'] && $this->fields['_notnull'][$vo] && $this->fields['_default'][$vo]===null){$this->options['_data'][$vo]=''; } } } } foreach($this->options['_data'] as $key=>$value){if($value=='' && preg_match('~int$~',$this->fields['_type'][$key])){$value=0; } $value=$this->parseValue($value); if($value===false||$value===true) continue; if(is_scalar($value)){if(!$this->checkField($key)){continue; } $speciaKey=$this->addSpecialChar($key); $values[]=$value; $fields[]=$speciaKey; } } unset($this->options['_data']); switch($type){case 'add': return ' ('.implode(',', $fields).') VALUES ('.implode(',', $values).')'; break; case 'save': foreach($values as $k=>$vo){$set[]=$fields[$k].'='.$vo; } return ' SET '.implode(',',$set); break; default: return false; } } private function _parseCondition(){$condition=""; if(!empty($this->options['_where'])){$where=$this->options['_where']; $where=$this->parseWhere($where); if($where){$condition.=' WHERE '.$where; } unset($this->options['_where']); } if(!empty($this->options['_group'])&&is_string($this->options['_group'])){$condition.=" GROUP BY ".$this->options['_group']; unset($this->options['_group']); } if(!empty($this->options['_having'])&&is_string($this->options['_having'])){$condition.=" HAVING ".$this->options['_having']; unset($this->options['_having']); } if(!empty($this->options['_order'])&&is_string($this->options['_order'])){if($this->options['_order']=='rand'){$condition.=" ORDER BY RAND()"; }else{$arr=explode(',',$this->options['_order']); $newarr=array(); foreach($arr as $k=>$vo){list($order,$px)=explode(' ',$vo); $order=str_replace('`','',$order); $newarr[]='`'.$order.'` '.$px; } $neworder=implode(',',$newarr); $condition.=" ORDER BY ".$neworder; } unset($this->options['_order']); } if(!empty($this->options['_limit'])&&(is_string($this->options['_limit'])||is_numeric($this->options['_limit']))){$condition.=" LIMIT ".$this->options['_limit']; unset($this->options['_limit']); } if(empty($condition)) return ""; return $condition; } private function parseWhere($where){$whereStr=''; if(is_string($where)){$whereStr=$where; }else{if(array_key_exists('_logic',$where)){$operate=' '.strtoupper($where['_logic']).' '; unset($where['_logic']); }else{$operate=' AND '; } foreach ($where as $key=>$val){if(is_array($val) && empty($val)) continue; $whereStr.="( "; if(0===strpos($key,'_')){$whereStr.=$this->parseSpecialWhere($key,$val); }else{$key=$this->addSpecialChar($key); if(is_array($val)){if(is_string($val[0])){if(preg_match('/^(EQ|NEQ|GT|EGT|LT|ELT|NOTLIKE|LIKE)$/i',$val[0])){$whereStr.=$key.' '.$this->comparison[strtolower($val[0])].' '.$this->parseValue($val[1]); }elseif('exp'==strtolower($val[0])){$whereStr.=' ('.$key.' '.$val[1].') '; }elseif(preg_match('/IN/i',$val[0])){if(is_string($val[1])){$val[1]=explode(',',$val[1]); } $zone=implode(',',$this->parseValue($val[1])); $whereStr.=$key.' '.strtoupper($val[0]).' ('.$zone.')'; }elseif(preg_match('/BETWEEN/i',$val[0])){$data=is_string($val[1])? explode(',',$val[1]):$val[1]; $whereStr.=' ('.$key.' BETWEEN '.$data[0].' AND '.$data[1].' )'; }else{$this->error($val[0]); } }else{$count=count($val); if(is_string($val[$count-1]) && in_array(strtoupper(trim($val[$count-1])),array('AND','OR','XOR'))){$rule=strtoupper(trim($val[$count-1])); $count=$count -1; }else{$rule='AND'; } for($i=0;$i<$count;$i++){$data=is_array($val[$i])?$val[$i][1]:$val[$i]; if('exp'==strtolower($val[$i][0])){$whereStr.='('.$key.' '.$data.') '.$rule.' '; }else{$op=is_array($val[$i])?$this->comparison[strtolower($val[$i][0])]:'='; $whereStr.='('.$key.' '.$op.' '.$this->parseValue($data).') '.$rule.' '; } } $whereStr=substr($whereStr,0,-4); } }else{$whereStr.=$key." = ".$this->parseValue($val); } } $whereStr.=' )'.$operate; } $whereStr=substr($whereStr,0,-strlen($operate)); } return empty($whereStr)?'':$whereStr; } private function parseSpecialWhere($key,$val){$whereStr=''; switch($key){case '_string': $whereStr=$val; break; case '_complex': $whereStr=$this->parseWhere($val); break; case '_query': parse_str($val,$where); if(array_key_exists('_logic',$where)){$op=' '.strtoupper($where['_logic']).' '; unset($where['_logic']); }else{$op=' AND '; } $array=array(); foreach($where as $field=>$data) $array[]=$this->addSpecialChar($field).' = '.$this->parseValue($data); $whereStr=implode($op,$array); break; } return $whereStr; } private function parseField($fields){if(is_array($fields)){$array=array(); foreach($fields as $key=>$field){if(!is_numeric($key)) $array[]=$this->addSpecialChar($key).' AS '.$this->addSpecialChar($field); else $array[]=$this->addSpecialChar($field); } $fieldsStr=implode(',', $array); }elseif(is_string($fields) && !empty($fields)){$fieldsStr=$this->addSpecialChar($fields); }else{$fieldsStr='*'; } return $fieldsStr; } private function parseValue($value){if(is_string($value)){$value='\''.$this->escape_string($value).'\''; }elseif(isset($value[0]) && is_string($value[0]) && strtolower($value[0]) == 'exp'){$value=$this->escape_string($value[1]); }elseif(is_array($value)){$value=array_map(array($this,'parseValue'),$value); }elseif(is_null($value)){$value='\'\''; } return $value; } private function addSpecialChar(&$value){if(0 === stripos($this->dbconfig['db_type'],'mysql')){$value=trim($value); if( false !== strpos($value,' ') || false !== strpos($value,',') || false !== strpos($value,'*') || false !== strpos($value,'(') || false !== strpos($value,'.') || false !== strpos($value,'`')){}else{$value='`'.$value.'`'; } } return $value; } public function escape_string($str){return addslashes($str); } } ?>